[
    {
        "player0": "import math\n\nvelocity = 10.0\n\nyaw = 0.0\npitch = 0.0\n\ngrounded = False\nrotation_angle = 45.0\nentity.visible = True\n\ndef update():\n\tglobal velocity, dragging_item, hovered_entity, yaw, pitch, grounded\n\n\n\tcamera_direction = camera.front * time.dt * velocity\n\tcamera_direction.y = 0\n\n\tDeltaTimeVec3 = Vector3(time.dt, time.dt, time.dt)\n\n\tif IsKeyDown(KeyboardKey.KEY_W):\n\t\tentity.applyImpulse(camera_direction)\n\n\tif IsKeyDown(KeyboardKey.KEY_S):\n\t\tentity.applyImpulse(camera.back * DeltaTimeVec3 * velocity)\n\n\tif IsKeyDown(KeyboardKey.KEY_A):\n\t\tleft = camera.left * DeltaTimeVec3 * velocity\n\t\tentity.applyImpulse(left)\n\n\tif IsKeyDown(KeyboardKey.KEY_D):\n\t\tright = camera.right * DeltaTimeVec3 * velocity\n\t\tentity.applyImpulse(right)\n\n\tif IsKeyPressed(KeyboardKey.KEY_SPACE):\n\t\tif (grounded):\n\t\t\tentity.applyImpulse(Vector3(0, 9, 0))  # Adjust for desired jump height\n\n\tcamera.position = Vector3(entity.position.x - 5, entity.position.y + 5, entity.position.z )\n\tcamera.look_at = Vector3(entity.position.x, entity.position.y, entity.position.z)\n\n\tsensitivity = 0.3\n\tyaw -= GetMouseMovement().x * sensitivity\n\tpitch -= GetMouseMovement().y * sensitivity\n\n\tpitch = max(-89.0, min(89.0, pitch))\n\n\t# Calculate the front direction based on yaw and pitch\n\tfront = Vector3(\n\t\tmath.cos(math.radians(yaw)) * math.cos(math.radians(pitch)),\n\t\tmath.sin(math.radians(pitch)),\n\t\t-math.sin(math.radians(yaw)) * math.cos(math.radians(pitch))\n\t)\n\n\tcamera.look_at = camera.position + front\n\tcamera.up = Vector3(0, 1, 0)\n\n\tdistance = raycast(\n                entity.position,\n                Vector3(0,-1,0),\n                ignore = [entity]\n\t).distance\n\n\tgrounded = distance < entity.scale.y / 2 + 0.01\n\n\n\n\n"
    }
]