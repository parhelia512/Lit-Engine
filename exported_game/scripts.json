[
    {
        "player0": "import math\n\n# Constants\nVELOCITY = 40\nSENSITIVITY = 0.3\nENTITY_DISTANCE = 5\nJUMP_FORCE = 100\nFOV_FORWARD = 80\nFOV_NORMAL = 60\nFOV_BACKWARD = 40\n\n# Initial values\nyaw, pitch = 0, 0\ngrounded = False\nentity.visible = True\n\n\n#LockMouse()\n\n# Helper functions\ndef spherical_to_cartesian(radius, yaw, pitch):\n    x = radius * math.cos(math.radians(yaw)) * math.cos(math.radians(pitch))\n    y = radius * math.sin(math.radians(pitch))\n    z = radius * math.sin(math.radians(yaw)) * math.cos(math.radians(pitch))\n    return Vector3(x, y, z)\n\ndef get_camera_direction():\n    direction = camera.front\n\n    return direction\n\ndef is_moving_forward_backwards():\n    return IsKeyDown(KeyboardKey.KEY_W) or IsKeyDown(KeyboardKey.KEY_S)\n\ndef update_camera_fovy():\n    if IsKeyDown(KeyboardKey.KEY_W):\n        camera.fovy = Lerp(camera.fovy, FOV_FORWARD, time.dt)\n    elif IsKeyDown(KeyboardKey.KEY_S):\n        camera.fovy = Lerp(camera.fovy, FOV_BACKWARD, time.dt)\n    else:\n        camera.fovy = Lerp(camera.fovy, FOV_NORMAL, time.dt)\n\ndef update_camera_rotation():\n    global yaw, pitch\n    yaw -= GetMouseMovement().x * SENSITIVITY\n    pitch -= GetMouseMovement().y * SENSITIVITY\n    pitch = max(-89, min(89, pitch))\n    \ndef update_camera_position():\n    global yaw, pitch\n    front = spherical_to_cartesian(ENTITY_DISTANCE, -yaw, -pitch)\n    camera.position = entity.position + front\n    camera.look_at = entity.position\n    camera.up = Vector3(0, 1, 0)\n\ndef change_gravity():\n    GRAVITY_STRENGTH = 9.8\n    center_point = Vector3(0, 0, 0)\n    direction_to_center = center_point - entity.position\n\n    physics.gravity = direction_to_center\n\n\n\ndef check_ground():\n    global grounded\n    halfScale = entity.scale.y / 2\n    ray = Raycast(entity.position - Vector3(0, halfScale - 0.1, 0), Vector3(0, -1, 0), ignore=[entity])\n    grounded = ray.hit and ray.distance < 0.15  # floating pointers margin\n\ndef set_entity_rotation():\n    global yaw\n    front = get_camera_direction()\n    entity_rotation_yaw = math.degrees(math.atan2(front.z, front.x)) + 90\n    entity.rotation = Vector3(0, -entity_rotation_yaw, 0)\n\ndef handle_movement():\n    global yaw, pitch, grounded\n\n    direction = get_camera_direction()\n\n    if IsKeyDown(KeyboardKey.KEY_W):\n        entity.applyImpulse(direction * time.dt * VELOCITY)\n    if IsKeyDown(KeyboardKey.KEY_S):\n        entity.applyImpulse(camera.back * time.dt * VELOCITY)\n    if IsKeyDown(KeyboardKey.KEY_A):\n        entity.applyImpulse(camera.left * time.dt * VELOCITY)\n    if IsKeyDown(KeyboardKey.KEY_D):\n        entity.applyImpulse(camera.right * time.dt * VELOCITY)\n    \n    if IsKeyPressed(KeyboardKey.KEY_SPACE) and grounded:\n        entity.applyImpulse(Vector3(0, JUMP_FORCE, 0))\n\n    update_camera_fovy()\n\ndef update():\n    handle_movement()\n    update_camera_rotation()\n    update_camera_position()\n    check_ground()\n    set_entity_rotation()\n    change_gravity()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    }
]