[
    {
        "file10": "import math\n\nentity.visible = False\n# Constants\nGROUND_TOLERANCE = 0.1\nJUMP_HEIGHT = 7.0\nSENSITIVITY = 0.3\n\n# Initialize variables\nvelocity = 700.0\nyaw, pitch = 0.0, 0.0\ngrounded = False\n\ndef update_camera(entity):\n    global yaw, pitch\n\n    sensitivity = 0.3\n    mouse_movement = GetMouseMovement()\n\n    yaw -= mouse_movement.x * sensitivity\n    pitch -= mouse_movement.y * sensitivity\n\n    pitch = max(-89.0, min(89.0, pitch))\n\n    # Calculate the front direction based on yaw and pitch\n    front = Vector3(\n        math.cos(math.radians(yaw)) * math.cos(math.radians(pitch)),\n        math.sin(math.radians(pitch)),\n        -math.sin(math.radians(yaw)) * math.cos(math.radians(pitch))\n    )\n\n    camera.position = Vector3(entity.position.x, entity.position.y + entity.scale.y / 2, entity.position.z)\n    camera.look_at = camera.position + front\n    camera.up = Vector3(0, 1, 0)\n\ndef apply_movement():\n    global grounded\n\n    camera_direction = camera.front * time.dt * velocity\n    camera_direction.y = 0\n\n    delta_time_vec3 = Vector3(time.dt, time.dt, time.dt)\n\n    if IsKeyDown(KeyboardKey.KEY_W):\n        entity.applyForce(camera_direction)\n\n    if IsKeyDown(KeyboardKey.KEY_S):\n        entity.applyForce(camera.back * delta_time_vec3 * velocity)\n\n    if IsKeyDown(KeyboardKey.KEY_A):\n        left = camera.left * delta_time_vec3 * velocity\n        entity.applyForce(left)\n\n    if IsKeyDown(KeyboardKey.KEY_D):\n        right = camera.right * delta_time_vec3 * velocity\n        entity.applyForce(right)\n\n    if IsKeyPressed(KeyboardKey.KEY_SPACE):\n        if grounded:\n            entity.applyImpulse(Vector3(0, JUMP_HEIGHT, 0))\n\ndef update():\n    global grounded\n\n    apply_movement()\n\n    update_camera(entity)\n\n    distance = raycast(\n        entity.position,\n        Vector3(0, -1, 0),\n        ignore=[entity]\n    ).distance\n\n    grounded = distance < entity.scale.y / 2 + GROUND_TOLERANCE\n\n\n\n"
    }
]